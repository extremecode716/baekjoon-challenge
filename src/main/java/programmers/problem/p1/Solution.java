package programmers.problem.p1;
//<div class="p-3"><h6 class="mb-3 _2c1lVVXCA5xmsDOxsZ0_k9">
//        문제 설명
//</h6> <div class="challenge-markdown"><div class="markdown solarized-dark"><p>직사각형을 만드는 데 필요한 4개의 점 중 3개의 좌표가 주어질 때, 나머지 한 점의 좌표를 구하려고 합니다. 점 3개의 좌표가 들어있는 배열 v가 매개변수로 주어질 때, 직사각형을 만드는 데 필요한 나머지 한 점의 좌표를 return 하도록 solution 함수를 완성해주세요. 단, 직사각형의 각 변은 x축, y축에 평행하며, 반드시 직사각형을 만들 수 있는 경우만 입력으로 주어집니다.</p>
//
//<h5>제한사항</h5>
//
//<ul>
//<li>v는 세 점의 좌표가 들어있는 2차원 배열입니다.</li>
//<li>v의 각 원소는 점의 좌표를 나타내며, 좌표는 [x축 좌표, y축 좌표] 순으로 주어집니다.</li>
//<li>좌표값은 1 이상 10억 이하의 자연수입니다.</li>
//<li>직사각형을 만드는 데 필요한 나머지 한 점의 좌표를 [x축 좌표, y축 좌표] 순으로 담아 return 해주세요.</li>
//</ul>
//
//<hr>
//
//<h5>입출력 예</h5>
//<table class="table">
//<thead><tr>
//<th>v</th>
//<th>result</th>
//</tr>
//</thead>
//<tbody><tr>
//<td>[[1, 4], [3, 4], [3, 10]]</td>
//<td>[1, 10]</td>
//</tr>
//<tr>
//<td>[[1, 1], [2, 2], [1, 2]]</td>
//<td>[2, 1]</td>
//</tr>
//</tbody>
//</table>
//<h5>입출력 예 설명</h5>
//
//<p>입출력 예 #1<br>
//세 점이 [1, 4], [3, 4], [3, 10] 위치에 있을 때, [1, 10]에 점이 위치하면 직사각형이 됩니다.</p>
//
//<p>입출력 예 #2<br>
//세 점이 [1, 1], [2, 2], [1, 2] 위치에 있을 때, [2, 1]에 점이 위치하면 직사각형이 됩니다.</p>
//</div></div></div>
public class Solution {
    public int[] solution(int[][] v) {
        int x = -1, y = -1;
        if(v[0][0] != v[1][0] && v[0][0] != v[2][0]) {
            x = v[0][0];
        } else if(v[1][0] != v[2][0] && v[1][0] != v[0][0]) {
            x = v[1][0];
        } else if(v[2][0] != v[1][0] && v[2][0] != v[0][0]) {
            x = v[2][0];
        }

        if(v[0][1] != v[1][1] && v[0][1] != v[2][1]) {
            y = v[0][1];
        } else if(v[1][1] != v[2][1] && v[1][1] != v[0][1]) {
            y = v[1][1];
        } else if(v[2][1] != v[1][1] && v[2][1] != v[0][1]) {
            y = v[2][1];
        }
        int[] answer = { x , y};

        return answer;
    }
}